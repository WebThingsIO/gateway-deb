name: Build

on:
  repository_dispatch:
    types: build-image

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          [
            "ubuntu:bionic",
            "arm64v8/ubuntu:bionic",
            "ubuntu:focal",
            "arm64v8/ubuntu:focal",
            "ubuntu:groovy",
            "arm64v8/ubuntu:groovy",
            "debian:buster",
            "arm64v8/debian:buster",
            "balenalib/raspberry-pi-debian:buster",
          ]
        include:
          - image: "ubuntu:bionic"
            name: "ubuntu-bionic"
            arch: "amd64"
          - image: "arm64v8/ubuntu:bionic"
            name: "ubuntu-bionic"
            arch: "arm64"
          - image: "ubuntu:focal"
            name: "ubuntu-focal"
            arch: "amd64"
          - image: "arm64v8/ubuntu:focal"
            name: "ubuntu-focal"
            arch: "arm64"
          - image: "ubuntu:groovy"
            name: "ubuntu-groovy"
            arch: "amd64"
          - image: "arm64v8/ubuntu:groovy"
            name: "ubuntu-groovy"
            arch: "arm64"
          - image: "debian:buster"
            name: "debian-buster"
            arch: "amd64"
          - image: "arm64v8/debian:buster"
            name: "debian-buster"
            arch: "arm64"
          - image: "balenalib/raspberry-pi-debian:buster"
            name: "raspbian-buster"
            arch: "armhf"
    steps:
      - name: Install qemu
        run: |
          sudo apt update
          sudo apt install -y qemu qemu-user-static binfmt-support --no-install-recommends
      - name: Setup qemu-user-static
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Generate the source tarball
        run: |
          ./generate-tarball.sh "${{ github.event.client_payload.gateway_version }}" "${{ github.event.client_payload.gateway_addon_version }}"
      - name: Build the Package
        run: |
          docker pull ${{ matrix.image }}
          docker create --name build -it ${{ matrix.image }} /build/build.sh
          docker cp . build:/build
          docker start -a build
          docker cp -L build:/build/webthings-gateway.deb ./webthings-gateway-${{ matrix.name }}-${{ matrix.arch }}.deb
          docker rm build
      - name: Save the package
        uses: actions/upload-artifact@v1
        with:
          name: webthings-gateway-${{ matrix.name }}-${{ matrix.arch }}.deb
          path: webthings-gateway-${{ matrix.name }}-${{ matrix.arch }}.deb
